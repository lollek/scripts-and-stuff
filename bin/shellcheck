#! /usr/bin/env bash
set -e

file=$1
if [[ -z $file ]]; then
  echo "Usage: $0 FILE" >&2
  exit 1
elif [[ ! -r $file ]]; then
  echo "$0: Unable to read $file" >&2
  exit 1
fi

# Ask the nice guy at shellcheck.net for feedback on our script
data=$(curl \
  --silent \
  --user-agent "ShellCheck@github.com/lollek/scripts-and-stuff" \
  --data-urlencode "script@$file" \
  "http://www.shellcheck.net/shellcheck.php")

# No issues? Grand!
if [[ $data == '[]' ]]; then
  echo "No errors reported!"
  exit 0
fi

# Open script file so we can iterate over it
exec 4<"$file"
file_line_num=0

# Data is formatted like this: [{asd},{asd},...],
# so lets changed each into a line
sed -re 's:\[?\{([^}]+)\}(,|\])?:\1\n:g' <<<"$data" |
while read line; do
  # Now it's formatted like this:
  # "line":N,
  # "column":N,
  # "level":"style/info/warning/error",
  # "code":N,
  # "message":"lorem ipsum"

  # Find line for next message, if this fails, we are done
  if [[ ! $line =~ \"line\":([[:digit:]]+) ]]; then
    while IFS= read -ru4 file_line; do
      echo "$file_line"
    done
    exit 0
  fi
  msg_line_num=${BASH_REMATCH[1]}

  # Print all lines in file until the "issue"
  while [[ $file_line_num -lt $msg_line_num ]]; do
    IFS= read -ru4 file_line && echo "$file_line" || exit 0
    ! ((file_line_num++))
  done

  # Build the error message
  error_msg=
  [[ $line =~ \"column\":([[:digit:]]+) ]]
  for ((i=0; i < BASH_REMATCH[1]; ++i)); do
    error_msg="$error_msg "
  done
  [[ $line =~ \"level\":\"([^\"]+)\" ]]
  case ${BASH_REMATCH[1]} in
    "error")   error_msg="$error_msg\033[1;31m";;
    "style")   error_msg="$error_msg\033[1;34m";;
    "warning") error_msg="$error_msg\033[1;33m";;
    "info")    error_msg="$error_msg\033[1;36m";;
  esac
  [[ $line =~ \"message\":\"([^\"]+)\" ]]
  error_msg="$error_msg^-- ${BASH_REMATCH[1]}\033[0m"

  # Print it out!
  echo -e "$error_msg"
done
