#! /usr/bin/env ruby
# encoding: UTF-8

require 'socket'

class BirthdayFinder
  def BirthdayFinder.find_person(name, surname)
    BirthdayFinder.http_lookup("/sok/?f=#{name}&l=#{surname}")
  end

  def BirthdayFinder.http_lookup(original_data)
    # HTML-escape keywords
    data = "/sok/?"
    original_data.scan(/([a-z]?=)(.*?)(&|$)/).each do |prefix, str, suffix|
      data += prefix + htmlescape(str) + suffix
    end

    # Send request - receive HTML-body
    TCPSocket.open "birthday.se", 80 do |sock|
      sock.print "GET #{data} HTTP/1.1\r\n" +
                 "Host: www.birthday.se\r\nConnection: close\r\n\r\n"
      data = sock.read
    end

    # Convert HTML-body to a list of LookupPersons
    (purge_black_encoding(data)
     .scan /(<a href="\/person\/[a-z0-9-]+">.*?<\/a>).*?(<span>.*?<\/p>)/)
     .map {|person| LookupPerson.new person}
  end

  private
  def BirthdayFinder.htmlescape(string)
    # Encode name and surname to ISO-8859-1 and then HTML-escape it
    string.encode("ISO-8859-1").gsub(/([^ a-zA-Z0-9_.-]+)/) do |char|
      '%' + char.unpack('H2' * char.bytesize).join('%')
    end.tr(' ', '+')
  end

  def BirthdayFinder.purge_black_encoding(string)
    # Encode HTML-escaped ISO-8859-1-bytestring to UTF-8
    string.tr('+', ' ').force_encoding(Encoding::ASCII_8BIT)
    .gsub(/((?:%[0-9a-fA-F]{2})+)/) do |char|
      [char.delete('%')].pack('H*')
    end.force_encoding("ISO-8859-1").encode("UTF-8")
  end
end

class LookupPerson
  attr_reader :abstract, :info, :name, :addr, :age

  def initialize(redata)
    @name_raw = redata[0]
    @addr_raw, @age_raw = redata[1].split("På samma adress</a>")

    @name = prettify @name_raw
    @addr = prettify @addr_raw
    @age  = prettify @age_raw

    @abstract =
      "#{@name} (#{@age.match(/\d+ år/)}) @#{@addr.match(/[[:alpha:]]+$/)}"
    @info = "Namn:   #{@name}\nAdress: #{@addr}\nÅlder:  #{@age}"
  end

  def get_more_from_same_address()
    BirthdayFinder.http_lookup(@addr_raw.match(/<a href=\"(.*?)\"/)[1])
  end

  def print_all_from_same_address()
    current_addr = nil
    get_more_from_same_address.map do |person|
      [person.abstract, person.addr]
    end.sort { |p1, p2| p1[1] <=> p2[1] }.each do |abstract, addr|
      if current_addr != addr
        puts "\n#{addr}"
        current_addr = addr
      end
      puts "\t#{abstract}"
    end
  end

  private
  def prettify(string)
    string.gsub /<.*?>/, ''
  end
end

def die(err)
  $stderr.puts err
  exit 1
end

def main(name, surname)
  # Find person
  print "Söker..."; $stdout.flush
  list = BirthdayFinder.find_person(name, surname)

  # Print results
  selected_person = nil

  case list.length
  when 0 then
    puts "0 träffar"
    exit 0
  when 1 then
    selected_person = list.first
    puts "1 träff"
  when 2..9 then
    puts "#{list.length} träffar:\n"
  else
    puts "10+ träffar:\n"
  end

  # Ask for selection if 2+ results
  if selected_person.nil?
    puts list.map.with_index { |person, i|
      person = person.abstract
      .gsub(/(?<=^|\s)#{name}(?=\s|$)/, "\033[1;33m#{name}\033[0m")
      .gsub(/(?<=^|\s)#{surname}(?=\s|$)/, "\033[1;33m#{surname}\033[0m")
      "#{i +1}: #{person}"}

    print "Vem? "; $stdout.flush
    selected_person = (i = $stdin.gets.to_i) == 0 ? nil : list[i -1]
    exit if selected_person.nil?
  end

  puts "\n#{selected_person.info}"
  print ["\n1 - Person på samma address", "Mer info? "].join("\n")
  $stdout.flush
  case $stdin.gets.to_i
  when 1 then selected_person.print_all_from_same_address
  end

end

if __FILE__ == $0
  die "Usage #{$0} name surname" unless ARGV.length == 2
  main ARGV[0], ARGV[1]
end
