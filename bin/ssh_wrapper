#! /usr/bin/env perl
# Created 01/01/14
# A very basic wrapper for running a script before a ssh/scp/rsync

# Usage:
# If you want to run "echo hello world" before you ssh to Host google,
# and google looks like this in .ssh/config:
#
# Host google
#   Hostname ssh.google.com
#   User sshuser
#
# you should change it to this
#
# Host google
#   Hostname ssh.google.com
#   User sshuser
#   #!Script echo hello world
#
# Then create a bash function like this, to make it not interfere with open apps
# ssh() { "ssh_wrapper" "ssh" $@; }
# scp() { "ssh_wrapper" "scp" $@; }
# etc
# Then run it with ssh <options> google

use strict;
use warnings;

my $hostname;
my $progname = $ARGV[0];
shift(@ARGV);

# Check what type of prog we are dealing with
if ($progname eq "ssh" ||
    $progname eq "mosh") {
  $hostname = (grep {/^[\w.]+$/} @ARGV)[0];

} elsif ($progname eq "scp" ||
         $progname eq "rsync") {
  $hostname = (split(":", (grep {/^[\w.]+(?=:)/} @ARGV)[0]))[0];

} else {
  die "$0: Bad filename!\n";
}
die "$0: No hostname found\n" unless defined $hostname;

# Find host in .ssh/config and exec any command found
open FILE, "<", <"~/.ssh/config">
  or die "$!\n";

my $do_exec = 0;
while (<FILE>) {
  # #!Script can be in either "Host $hostname" or "Host *"
  if ($_ =~ /^Host\s+(?:$hostname|\*)\s*$/) {
    $do_exec = 1;

  } elsif ($do_exec && $_ =~ /^\s+/) {
    if ($_ =~ /^\s+#!Script\s(.*)$/) {
      system(split(" ", $1));
    }

  } else {
    $do_exec = 0;
  }
}

close(FILE);

exec "$progname @ARGV";

