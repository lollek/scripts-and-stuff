Steg 1 - Skriv om raderna:

  OSB! awk i följande fall innebär egentligen gawk, vilket antagligen är det program som körs om du skriver awk

  För detta steg kommer vi att använda awk, vilket är ett turing-komplett programmeringsspråk
  
  Kommandot vi kommer använda oss av ser ut såhär:
    awk '$0=$3+$4+$5FS$1FS$2' resultat.txt
  Där
    awk är namnet på applikationen
    '$0=$3+$4+$5FS$1FS$2' är uttrycket för hur utdata ska genereras från indata
    resultat.txt är filen där vi tar vår indata
    
  Kommandot läser in en rad i taget, vilket ser ut på följande sätt:
    Mikaela Andersson       14   -  17
  Och ger utdata som ser följande ut:
    31 Mikaela Andersson
    
  Uttrycket fungerar på följande sätt:
    Varje rad som awk tar från filen lagrar den i variabeln $0
    Varje rad delas också upp i ord, där det första ordet lagras i variabeln $1, den andra i $2, osv
    Alltså är $1 i detta fall "Mikaela" och $3 är "14"
    När uttrycket har evaluerats så skriver den automatiskt ut variabel $0,
      därför kommer vi inte att använda någon funktion för utskrift, utan endast modifiera $0
    Den första biten av uttrycket ($0=) betyder att resten av uttrycket kommer att lagras i variabel $0
    Den andra biten ($3+$4+$5) innebär att vi tar variabel $3, $4 och $5 och summerar dessa,
      i ovan exempel ger därför (14+0+17) vilket är 31. Då strecket (-) inte är en siffra så räknas det som 0
    Den sista biten(FS $1 FS $2) fungerar på följande sätt:
      $1 ger den första variabeln (ovan Mikaela)
      $2 ger den andra variabeln (ovan Andersson)
      FS betyder samma sak som mellanrum i detta fall, så den separerar resultaten av $3+$4+$5, $1 och $2
      
Steg 2 - Sortera raderna:

  Då utdata från det föregående kommandot nu ligger i oordning (Raderna ska stå med högst nummer först),
    så måste vi sortera resultatet
    
  Vi kommer därför lägga på |sort -r på det föregående kommandot, så det totalt ser ut såhär:
    awk '$0=$3+$4+$5FS$1FS$2' resultat.txt|sort -r
  Där
    strecket (|) innebär att vi tar all utdata från det som står vänster om det och
      ger det till programmet på höger sida (alltså sort)
    sort sorterar varje rad så att den rad med minst nummer står överst och störst längst ner
      då det är helt tvärtemot vad vi vill så ger vi också kommandot -r, 
      vilket gör att sort sorterar åt andra hållet istället
    
Summa summarum: 
    awk '$0=$3+$4+$5FS$1FS$2' resultat.txt|sort -r

